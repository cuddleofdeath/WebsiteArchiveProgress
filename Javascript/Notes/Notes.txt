Javascript Notes:

1. The 'let' keyword:
          In ES6 (a major update to Javascript), a new keyword called 'let' was introduced. 

          One of the biggest problems with declaring variables with var keyword is that you can easily overwrite variable declariatons.

          So, unlike the 'var' keyword, when you use 'let', a variable with the same name can only be declared once.

2. The 'const' keyword:
'const' has all the awesome features that let has, with the added bonus that variables declared using 'const' are read-only. They are a constant value, which means that once a variable is assigned with const, it cannot be reassigned. 

3. When to use 'let' vs 'const' and so on and so forth:
  - Use 'let' when you want the variable to change, and 'const' when you want the variable to remain constant. 



4. ++ and -- operators

You can increment or add one to a variable with the ++ operator.

For example:
i++; 
is the equivalent of:
i = i + 1;

The entire line becomes i++;, eliminating the need for the equal sign.

You can take code like:
myVar = 88;
myVar = myVar + 1;

and simply rewrite it as:
myVar = 88;
myVar++;

Now, you can decrement or remove one to a variable with the -- operator.

For example:
i--;
is the equivalent of:
i = i - 1;

The entire line becomes i--;, eliminating the need for the equal sign.

You can take code like:
myVar = 88;
myVar = myVar - 1;

and simply rewrite it as:
myVar = 88;
myVar--;

5. The '+=' operator:
In programming, it's common to use assignments to modify the contents of a variable. Everything to the right of the equals sign is evaluated first, so we can say: 

myVar = myVar + 5;

This would add 5 to myVar. There is a better way to do this all in one step, using the '+=' operator.

let myVar = 1;
myVar += 5;
console.log(myVar);

You can, additionally, concatenate a string onto the end of an existing string variable. This can be very helpful to break a long string over several lines.

Example: 
let myStr = "This is the first sentence. "
myStr += "This is the second sentence."
console.log(myStr);

outputs:
This is the first sentence. This is the second sentence. 

Additionally, take a look at this example as well:

const someAdjective = "cool.";
let myStr = "My cat thinks I'm ";
myStr += someAdjective;

This would cause console.log(myStr); to register as the following sentence:
My cat thinks I'm cool.

6. The '*=' operator:
It works similar to the operator listed in #5, but it multiplies.

  myVar = myVar * 5;
  can be rewritten as:
  myVar *= 5;

7. The '/=' operator:
Same as above, but it divides.
  myVar = myVar / 5;
  can be rewritten as:
  myVar /= 5;

  8. Using backslashes in quote/word strings to use things like quotes inside of quote strings.

  const myStr = "I am a \"double quoted\" string inside \"double quotes\".";

  This would produce text that says:
  I am a "double quoted" string inside "double quotes".

  7. Escape Sequences in Strings:
  There are two reasons to use escaping characters:
  1. To allow you to use characters you may not otherwise be able to type out, such as a carriage return.
  2. To allow you to represent multiple quotes in a string without JavaScript misinterpreting what you mean.

  Types of Escape Sequences:
  Single quote: \'
  Double quote: \"
  Backslash: \\
  Newline: \n
  Carriage return: \r 
  Tab: \t
  Word Boundary: \b
  Form Feed: \f

  ---- Take a look at this example: ---
  const myStr = "FirstLine\n\t\\SecondLine\n\ThirdLine"; 

  This would output the following code when using console.log(myStr); :

  myStr:
FirstLine
	\SecondLine
ThirdLine

8. You can construct links with variables in them:

const linkName = "freeCodeCamp";
const myLink = "https://www." + linkName + ".org";
console.log(myLink);

This would produce:
https://www.freeCodeCamp.org

9. You can get the last letter of a string by subtracting one from the string's length.

Take a look at this example:

const dogName = "Chonk";
const lastLetterOfDogName = dogName[dogName.length -1];
console.log(lastLetterofDogName);

The console output would simply be the last letter of dogName, which is k.

10. To go along with #9's tip, you can also use the length property to get different characters of a string.

For example:
const firstName = "John";
const thirdToLastLetter = firstName[firstName.length -3];
console.log(thirdToLastLetter);

The console output would simply be the 3rd to last letter of the firstName (John), so the letter would be o.

11. You can also create sentences out of several constants, observe the following code:

const myNoun = "dog";
const myAdjective = "big";
const myVerb = "ran";
const myAdverb = "quickly";

const wordBlanks = "The " + myAdjective + " " + myNoun + " " + myVerb + " " + myAdverb + ".";

console.log(wordBlanks);

This would produce the following sentence:
The big dog ran quickly.

12. Arrays

You can create an array by following the code below as reference:
const arrayName = ["Dogs", "Cats", "Horses"];

You can also include numbers as well:
const arrayName = ["Dogs", 3, "Cats", 4, "Horses"];

You can also NEST an array within another array, observe the following code:
const arrayName = [["Chocolate", 24], ["Cats", 43]];

You can also access array data with indexes.

Example:
const arrayName = [20, 30, 40];
arrayName[0];
const myData = arrayName[2];

console.log(arrayName);
console.log(myData);

13. Multi-dimensional arrays, or... Arrays within Arrays [w/ indexes]

Observe the following code:
const myArray = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
  [[10, 11, 12], 13, 14],
];

const myData = myArray[0][0];

by default, myData would be equal to the first array's first variable (1, in this case)

However, we can select the number '8' by changing it to the following code, for reference:


const myArray = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
  [[10, 11, 12], 13, 14],
];

const myData = myArray[2][1];

console.log(myData);

console.log(myData) would end up returning the number 8, because myArray[2][1] accesses the third array's second indexed variable.

Another example of an array with other arrays (sub-arrays) can be found below:

const myList = [ 
  ["Beef Steak", 2],
  ["Canned Corn", 12],
  ["Chicken Hotdog", 2],
  ["Oreo Sundae Pie", 1],
  ["Orange Juice", 1]
];

14. Manipulating arrays with push()

You can easily append data to the end of an array using the push() function.

push() takes one or more arguments and 'pushes' them to the end of an array.

Observe the following code example:
const randomArray = [["Pepper", "Salt", 250], ["Lemon", "Buffalo", 2]];

randomArray.push(["Wallpaper", 222, "Movies", "Video Games"]);

console.log(myArray);

In this scenario, console.log(randomArray); would return the following:
  [ [ 'Pepper', 'Salt', 250 ], [ 'Lemon', 'Buffalo', 2 ], [ 'Wallpaper', 222, 'Movies', 'Video Games' ] ]

  15. The pop() function.

  pop() can be used to pop a value off the end of an array. Any type of entry works with  the pop() function (numbers, strings, and nested arrays).

  Take a look at the following example:
  const randArray = [["Icecream", "Candy bars", "Soup", 42], ["Jerky", "Gum", "Crackers", 24]];

  const minusArray = randArray.pop()
  console.log(randArray);

  This would return the following:
  [ [ 'Icecream', 'Candy Bars', 'Soup', 42] ]

  16. The shift() function.

  shift() can be used to remove the first element in an array. Observe the following code:

  const randArray = [["Cat", 2], ["Dog", 3]];
  const removedArray = randArray.shift();
  console.log(randArray);

  In the code above, console.log(randArray); would now produce the below result:
  [ [ 'Cat', 2] ]

  17. The unshift() function.

  unshift() can essentially add elements in the beginning of an array, instead of at the end like push() does.

  Observe the following code example:
  const myArray = [["Dog", 24], ["Horse", 7]];
  //myArray.shift();
  myArray.unshift(["Cat", 44]);
  console.log(myArray);

  In this example, console.log(myArray); would produce the following:
  [ [ 'Cat', 44 ], [ 'Dog', 24 ], [ 'Horse', 7 ] ]

  If you were to uncomment the currently commented code, it would shift the first element out of the array, then unshift would add "Cat", 44 to the beginning.

  Observe the example:
    const myArray = [["Dog", 24], ["Horse", 7]];
    myArray.shift();
    myArray.unshift(["Cat", 44]);
    console.log(myArray); 

  In this example, the console.log(myArray); would produce the following:
  [ [ 'Cat', 44 ], [ 'Horse', 7 ] ]

  18. Functions in JavaScript
  Functions can be used in JavaScript to divide up code into reusable parts.

  Observe the following example:

  function functionName() {
    console.log("This is a function!");
  }
  functionName();


  The above code would produce:
  This is a function!

  As text. We can create and call functions throughout javascript, sometimes even calling a function multiple times throughout a project.

  To pass values to functions with arguments, observe the following code:

  function additionFunction(firstNum, secondNum) {
    console.log(firstNum + secondNum);
  }
  additionFunction(2,2);
  additionFunction(21,40);


  The above code would run twice, the first time it would add the 2 variables (2 and 2), which would result in 4.

  The second time it runs, it would add the first number of the second function (21) with the second number of the second function (40). The result would be 61.

  So, the console.log output would simply say:
  4
  61

  19. The return() statement inside a function().

  We can pass values into functions with arguments. You can use the return statement to send a value back out of a function.

  Observe the following code:

  function timesFive(number) {
    return number * 5;
  }
  timesFive(5);
  timesFive(2);
  timesFive(0);

  This would run the timesFive function a total of 3 times, the first time it would multiply 5 by 5, resulting in 25.

  The second time, it would be multiplying the number 2 by 5, resulting in 10.

  The third and final time, it would be multiplying 0 by 5, resulting in 0.

  The output on the console would simply look like:
  25
  10
  0

  20. Global vs Local variables
  It's possible to have both local and global variables with the same name. When you do this, the local variable takes precedence over the global variable.

  Observe the following code as an example:

  const dogBreed = "Greyhound";

  function nextDogBreed() {
    const dogBreed = "Chihuahua";
    return dogBreed;
  }

  nextDogBreed(dogBreed);


  This will return "Chihuahua", because in the function, we called the local version of the dogBreed const. However, the global version was not called in this case.

  21. "Undefined" value returned from a function.

  A function does not necessarily need to have a return statement, however, if a function is without a return statement, it will process the code but return the value as undefined.

  Observe the following code:

  let num = 0;

  function addTwo() {
    num = num + 2;
  }

  function addThree() {
    num = num + 3;
  }

  addTwo();
  addThree();
  console.log(addThree());

  would return undefined.

  This can simply be remedied by adding 'return num' inside of this particular function.

  22. Another example of 'returning' a specific value:

  let processed = 0;

  function processArg(num) {
    return (num + 3) / 5;
  }

  processed = processArg(7);
  console.log(processed);


  This would return a value of '2' to the console log. 
  This is because processed calls the processArg function with an argument of 7.

  If you recall the processArg function, it is num + 3 / 5, which means that our num = 7, so the function is running the calculation of (7 + 3) / 5. This simplifies down to 10 / 5, which can further be simplified down to 2.

  24. An example of an order queue function for Data Structure:

  function nextInLine(arr, item) {
    arr.push(item);
    var removed = arr.shift();
    return removed;
  }

  const testArr = [1, 2, 3, 4, 5];

  console.log("Before: " + JSON.stringify(testArr));
console.log(nextInLine(testArr, 6));
console.log("After: " + JSON.stringify(testArr));


This would display this in the console log:
Before: [1,2,3,4,5]
After: [2,3,4,5,6]



  25. Boolean data type.

  Booleans can either be true or false (no quotation marks). You can think of them as on and off switches, where true is on and false is off.

  Observe the following code:

  function testBool() {
    return true;
  }

  console.log(testBool);

  The console log would simply return the value of true.

  26. if statements:
  if statements tells JavaScript to execute speific code under specific conditions, defined in parantheses. These conditions are known as Boolean conditions and they may only be true or false.

  When set to true, the program executes the statement inside the curcly braces. Whenever it's false, however, the statement inside the braces will not execute.

  if (condition is true) {
    statement is executed;
  }

  Observe the following code:

  function trueOrFalse(wasThatTrue) {
    if (wasThatTrue) {
      return "Yes, that was true";
    }
    return "No, that was false";
  }
}

  trueorFalse(false);

  The above code would return "No, that was false"

  27. =
  The equals value assigns the value on the right to the variable on the left.

  Example: 
  variableA = 2;

  28. == operator
  The == operator, also called the equality operator, compares two values and returns true if they are equivalent or false if they're not.

  Observe the following code example:

  function testEqual(val) {
    if (val == 12) {
      return "Equal";
    }
    return "Not equal";
  }

  testEqual(10);
  testEqual(12);

  In the scenario with the above code, we would see "Not Equal" and "Equal", because with the result of testEqual(10);, we were seeing if 10 was equal to 12, which it is not, so it would return Not equal. However, testEqual(12); is simply seeing if 12 is equal to 12, which is is, so it would return "Equal".

  29. === operator
  === operator, or the Strict equality operator does not perform a type conversion. 

  If the values being compared have different types, they are inherently considered to be unequal, causing the strict equality (===) operator to return 'false'.

  Example:

  3 === 3
  3 === '3'

  These conditions would return true and false respectively. In the above example, the first one is equal because the number 3 is equal to the number 3. However, the reason why the second one is false (3 === '3') is simply because the number 3 and a string of '3' are not technically the same thing.

  We can also use a function as an example as well. Observe the following code below:

  function testStrict(val) {
    if (val === 7) {
      return "Equal";
    }
    return "Not equal";
  }

  testStrict(10);

  This would return as "not equal" because 10 is not 7.

  30. The != operator.

  The inequality operator is the exact opposite of the equality operator. It means not equal. It, like the equality operator, will convert data types of values while comparing.

  Examples

  1 != 2
  1 != "1"
  1 != '1'
  1 != true
  0 != false

  In order, these expressions would evaluate to true, false, false, false, and false.

  Looking at an example with a function, observe the following code:

  function testNotEqual(val) {
    if (val != 99) {
      return "Not Equal";
    }
    return "Equal";
  }

  testNotEqual(10);

This would return as 'not equal'

  31. The !== operator.

  It means "Strictly Not Equal" and is the opposite of the strict equality operator. 

  The !== operator will return false when items are equivalent, and true whenever items are not equivalent to each other.

  Examples
  3 !== 3 
  3 !== '3'
  4 !== 3

  These expressions would evaluate to false, true, and true.
  False because 3 and 3 are equivalent to one another, true because 3 and '3' [a string] are not equivalent, and true because 4 is not equal to 3.

  Observe the following code:

  function testStrictNotEqual(val) {
    if (val !== 17) {
      return "Not Equal";
    }
    return "Equal";
  }

  testStrictNotEqual(10);


  This would return "Not equal" because not equal is set to the function's 'true' section, which, in this case, because we used the strict inequality operator, it is true that 10 is NOT equal to 17.

  31. The > operator.
  The greater than operator compares if the number to the left is greater than the number to the right. If it is, it returns true. Otherwise, it is false.

  Examples
  5 > 3
  7 > '3'
  2 > 3
  '1' > 9

  Observe a function with this in use:

  function testGreaterThan(val) {
    if (val > 100) { 
      return "Over 100";
    }

    if (val > 10) {
      return "Over 10";
    }

    return "10 or Under";
  }

  testGreaterThan(10);
  console.log(testGreaterThan(10));

  The console would then return '10 or under'

  32. The >= operator.
  This is the greater than or equal to operator (>=) - It compares if the number to the left is greater than or equal to the number on the right.

  If the number on the left is greater than or equal to the number on the right, it will return true.

  If not, it will return false.

  Examples:

  6 >= 6
  7 >= '3'
  2 >= 3
  '7' >= 9

  This would return the values (in order) of true, true, false, and false respectively. 

  Observe the following function using the >= operator!

  function testGreaterOrEqual(val) {
    if (val >= 20) {
      return "20 or Over";
    }

    if (val >=10) {
      return "10 or Over";
    }

    return "Less than 10";
  }

  testGreaterOrEqual(10);
  console.Log(testGreaterOrEqual(10));

  This would return "10 or Over"

  33. The > operator.
  The less than operator compares to see if the value on the left is smaller (less than) the value on the right. If it is, it returns true. If the value on the right is smaller than the value on the left, however, it returns false.

  Examples
  2 < 5
  '3' < 7 
  5 < 5
  3 < 2
  '8' < 4

  This would return the values of true, true, false, false, and false respectively.

  Observe the following function as an example:

  function testLessThan(val) {
    if (val < 25) {
      return "Under 25";
    }

    if (val < 55) {
      return "Under 55";
    }
    return "55 or Over";
  }

  testLessThan(10);
  console.log(testLessThan(10));

  This would return "Under 25"