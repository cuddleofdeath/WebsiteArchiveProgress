I plan on making these notes onto a little webpage later to showcase
skills that I learn. For now, however, I will simply just compile
a list of notes here. 

They may not be organized or anything yet.

                                                CSS Tips:
1. If an element is overlapping another element, use the overflow: hidden; option within the element in question.

Things I learned:
<meta charset="UTF-8">
The charset attribute specifies the character encoding of the page, and nowadays, UTF-8 is the only encoding supported by most browsers.

Another thing I learned:
- Whenever setting the aspect-ratio in CSS, you can set something, like....16:9 [1080p], by simply using:
aspect-ratio: 16/9;
(This seemed pretty obvious, but it's also something I may easily forget, so I figured writing it down would be a great idea :))

You can target specific elements nested within other elements by writing code like this:
elementName > nestedElement {
  
}

Then you can insert whatever css formatting you'd like.

For example, if you had unordered list elements nested within the nav element, you could use
this code to evenly space the children (ul [the list] - in this case.)

nav > ul {
  display: flex;
  justify-content: space-evenly;
}


2. Using pseudo elements can help space content. 

For example:

p::before {
  content: "Question #";
}

This can be used to have the Question number on a form visible prior to the question and the options.
This would obviously depend on how you set up your HTML document, as it would need to be set up accordingly.

3. Using 'text-decoration: none;' on another class (for example, let's say you have a contact section at the 
bottom of your site...and it has hyperlinks, but we don't want the underline) will omit any general decoration that
would normally be present by default. (for example, by default, a href/links automatically will be underlined
unless text-decoration: none; is applied.)

4. Removing padding on other elements! Okay, so, you may have built a cool site so far, but some of your elements
are spaced incorrectly due to not having the individual element's padding set. So, by default, it may go by another element's 
CSS style previously defined in your document. Because of this, certain sections of a website can start to look out of place.

To fix this, simply target the correct element, and remove padding by adding:
padding: 0;

For a full example,

.classname {
  padding: 0;
}

5. Using 'scroll-behavior: smooth;', especially in all elements (using the * selector) is great practice whenever you have
links to sections of your page. Instead of it just jumping to the section, which can be disorienting for some users, it will
have a smooth scroll effect. 

Easy example:

* {
  scroll-behavior: smooth;
}

6. Although a smooth scroll-behavior is preferred by most users, some users find the scroll speed to be too slow. There is a 
rule that allows us to set the CSS based on the user's browser settings. 

  This rule is called the prefers-reduced-motion rule, which requires one of the following values:

  - reduce
  - no-preference

  So,  we can take our previous example above (#5), and implement this rule below:

  @media (prefers-reduced-motion: no-preference) {
  * {
    scroll-behavior: smooth;
  }
}

7. A media query can be used to change styles based on certain conditions, and they look like this:
  @media (condition) {

  }

  So, if you were to have one that had the max-width of 1000px, it would be written like this:
  @media (max-width: 1000px) {

  }

8.                      **CSS GRID TIP**
  Adding the 'grid-template-columns' activates CSS grid essentially, this property allows you to customize the column layout.

  For example, see this CSS code below:
  main {
    display: grid;
    grid-template-columns: 1fr 94rem 1fr;
  }

  This will create three coluimns where the middle column is 94rem wide, and the first and last columns are both 1 fraction of the remaining space in the grid container.

  9. Additional CSS Grid Tip:
  Use the 'minmax' function to make your columns responsive on any device. 

  The minmax function takes two arguments.
  The first argument is the minimum value, the second argument is the maximum value. The values defined can be a length, percentage, fr, or even a keyword like 'max-content'.

  Let's look at the CSS code below:

  main {
    display: grid;
    grid-template-columns: minmax(2rem, 1fr) minmax(min-content, 94rem) minmax(2rem, 1fr);
  }

  (add more information regarding this later, right now I'm simply adding it so I remember it later :))

  10. Regarding CSS, the 'repeat()' function is used to repeat a value, rather than writing it out manually, and is helpful for grid layouts. For example, setting the 'grid-template-columns' property to repeat(20, 200px) in the below example would create 20 columns each 200px wide:

  .heading {
    grid-column: 2/3;
    display: grid;
    grid-template-columns: repeat(2, 1fr);
  }

  11. Using -1 in the grid-column property can tell the element to span the full width of the grid. Observe the code below:
  .hero {
    grid-column: 1 / -1
  }

  12. The default settings for CSS Grid will create additional rows as needed. The below code would arrange the elements (5 elements) 

  The below code will create a 5 column grid arranged in a single row:
  .social-icons {
    display: grid;
    font-size: 3rem;
    grid-template-columns:  repeat(5, 1fr);
  }

  13. [CSS Grid] Regarding the 'grid-auto-flow' property, it can be used to add more elements on the same row. 

  This property takes eeither row or column as the first value, with an optional value of dense. 'grid-auto-flow' uses an auto-placement algorithm to adjust the grid layout.

  - Setting it to 'column' will tell the algorithm to create new columns for the content as needed.

  - Setting it to 'dense' allows the algorithm to backtrack and fill holes in the grid with smaller items, which can result in items appearing out of order.

  Observe the following code:
  .social-icons {
    display: grid;
    font-size: 3rem;
    grid-template-columns: repeat(5, 1fr);
    grid-auto-flow: column;
  }

  14. The grid-auto-flow: column; attribute can be written shorthand as 'grid-auto-columns'. Observe the code below:

  .social-icons {
    display: grid;
    font-size: 3rem;
    grid-template-columns: repeat(5, 1fr);
    grid-auto-flow: column;
    grid-auto-columns: 1fr;
  }

  15. [CSS Grid] Much like Flexbox, you can also use CSS Grid to align content of grid items with 'align-items' and 'justify-items'. 'align-items' will align child elements along the column axis, and 'justify-items' will align child elements along the row axis.

  Observe the code below:
    .social-icons {
    display: grid;
    font-size: 3rem;
    grid-template-columns: repeat(5, 1fr);
    grid-auto-flow: column;
    grid-auto-columns: 1fr;
    align-items: center;
  }

  16. **ACCESSIBILITY CSS** 
    You can make your text look like a printed magazine by giving it the property of 'text-align: justify'. 

    This can cause an accessibility concern, for example, presenting challenges for folks with dyslexia. 

  
  17. (Pseudo Selector) - The ::first-letter pseudo-selector allows you to target the first letter in the text content of an element.

  Observe the code below:
  .first-paragraph::first-letter {
    font-size: 6rem;
    color: orangered;
    float: left;
    margin-right: 1rem;
  }

  This code, assigned to the 'first-paragraph' class, would change the first letter of the first paragraph to orangered.

  18. The 'gap' property is a shorthand way to set the value of both column-gap and row-gap at the same time. If given one value, it sets both of them to that value.

  gap: 2 rem; for example.

  19. Example of responsivity with CSS Grid images:
  @media only screen and (max-width: 720px) {
    .image-wrapper {
      grid-template-columns: 1fr;
    }
  }

  To collapse your bottom text area into a single column on smaller screens, use this css code as reference:

@media only screen and (max-width: 600px) {
  .text-with-images {
    grid-template-columns: 1fr;
  }
}

  20. [might need to research this part] You can remove both the horizontal and vertical scrollbars, and prevent programmatic scrolling, using only one property: The 'overflow: clip' attribute.

  Observe the code below:
  body {
  background: linear-gradient(45deg, rgb(118, 201, 255), rgb(247, 255, 222));
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100vh;
  overflow: clip;
}

  21. 'skew' transform function. 

  You can use the 'skew' transform function, which takes two arguments:
  - The first is the angle to shear the x-axis by.
  - The second is the angle to shear the y-axis by.

  Observe the following code:
  .left-mountain {
  width: 300px;
  height: 300px;
  background: linear-gradient(rgb(203, 241, 228), rgb(80, 183, 255));
  position: absolute;
  transform: skew(0deg, 44deg);
}

                                    Things I need to look up:
1. What is an em? I know what a rem is, but what is em?
2. what does the 'clear' property really do? How does it work?
3. Learn more about the vw measuring unit.


                                      HTML Things that I learned:
1. When creating a link to a form, the proper way to go about it looks something like this:
<form method="post" action="https://randomlinkthatmayormaynotgosomewheredontclickit/please/formsubmit">
<section>Section test</section>
<section>Section test 2</section>
<section>Section test 3</section>
</form>

2. **accessibility** The role attribute. "To increase a page's accessibility, the role attribute can be used to help
indicate the purpose behind an element on the page to assistive technologies. The role
attirubte is a part of the web accessibility initiative (WAI), and accepts preset values."
(This quote is from freecodecamp.org's "Learn accessibility by building a quiz" section
of their new, beta version of Responsive Web Design - step 15.)

3. **accessibility continued** Every region role requires a visible label. This should be
referenced by the aria-labelledby attribute. 

For example, take this code into account:
<section role="region" aria-labelledby="facility-info"><h2 id="facility-info">Facility Information</h2></section>

4. Whenever you are trying to link to a section of a page, using a # in front of the id helps.
For example:

<ul>
<li><a href="#booking-info">Booking Info</a></li>
</ul>

This is just a single element on a list. However, by having the id of #booking-info,
clicking that would simply take the user to that section of the page.

It's like skipping to a certain chapter in a book.

5. **accessibility tip** Sometimes, adding placeholder text inside of an input type (in HTML)
is not the best way to go for accessibility. According to freeCodeCamp, "Too often, users
confuse the placeholdertext with an actual input value. They think
there is already a value in the input.

<div class="info">
  <label for="student-name">Name</label>
  <input type="text" name="student-name" id="student-name" placeholder="eg Ryan Reynolds" />
  </div>

  The above text would create a Name field, allowing the user to input
  their name in text form. However, the above would display a muted/grey colored "Ryan Reynolds", which
  some may confuse for already-filled in text. This can cause the user
  to mistake the field as something that shouldn't be filled in. 

  Removing this line makes it more obvious that it requires text input for that field.

  <div class="info">
    <label for="student-name">Name</label>
    <input type="text" name="student-name" id="student-name" />
    </div>

    This would remove the placeholder text for the name "Ryan Reynolds"


    6. **accessibility tip** + screen reader tip. In the below example, this shows a birthdate selecting
    element that says "D.O.B", however, with how it's currently written, the class sr-only will have
    text that screen-readers can read for those who use them. However, the issue is that the text (Date of Birth) is still visible.


              <div class="info">
            <label for="birth-date">D.O.B.<span class="sr-only">(Date of Birth)</span></label>
            <input type="date" name="birth-date" id="birth-date" />
          </div>

      To solve this (make the (Date of Birth) text invisible on the page so that it can only be picked
      up by screen readers), a common way, according to freeCodeCamp.com, is to create a CSS class like this:

              .sr-only {
	              position: absolute;
                width: 1px;
                height: 1px;
                padding: 0;
                margin: -1px;
                overflow: hidden;
                clip: rect(0, 0, 0, 0);
                white-space: nowrap;
                border: 0;
              } 
    7. **accessibility tip** adding the 'accesskey' attribute allows the user to simply press a key to navigate to a specific element.

    In this example, pressing 'i' would access the info section, pressing 'h' would access the html-questions section, and pressing 'c'
    would take the user to the 'css-questions' section:
       <ul>
          <li><a href="#student-info" accesskey="i">INFO</a></li>
          <li><a href="#html-questions" accesskey="h">HTML</a></li>
          <li><a href="#css-questions" accesskey="c">CSS</a></li>
			  </ul>

According to freeCodeCamp - "Note: It is not always advised to use access keys, but they can be useful"
    8. The 'loading' attribute. 

    The loading attribute on HTML elements can be set to 'lazy' to tell the browser not to fetch the image resources until it's needed (such as whenever a user scrolls the image into view). This means users with slow internet connections can view the content of your page without having to wait for the images to load.

    So, a normal image link looks a bit like this:
    <img class="imgclassname" src="catphoto.png" alt="alt text">

    This is just a simple image class that contains a cat photo with the alt text of 'alt text.'

    If we were to write this with the loading attribute set to lazy, it would simply look like this:
<img class="imgclassname" src="catphoto.png" alt="alt text" loading="lazy">

Now, whenever someone scrolls to the point on the page where that photo would be, the image will now (lazy) load.
    9. Something to remember about links (a href):
    By default, a (base) link looks like this:
    <a href="https://randomlinkthatmayormaynotgoanywherehopefullyitdoesnt.com>Text here</a>

  Obviously, there are various attributes we can add (like alt text  and stuff), however...if a person were to click on the link above, as is, it would open the link on the same tab that the user currently has active on their page.

  By adding a target="_blank" attribute, the link will open up in a new tab instead.

  <a href="https://www.rcmzlkcm09i42.com" target="_blank">Text here</a>

This new link would open up in a brand new tab.
    10. Link 'referrals' and analytics:
    By default, whenever a user clicks a link to go to another page, the HTTP header contains info about the address or URL of a page that a user might be visiting this from. This can be very useful for analytics to track how many users from your page visit whatever designated site that your link goes to.

    It is, however, possible to omit this information.

    If we add the 'noreferrer' attribute, it omits the information:
    <a href="https://www.fakelinkthatgoesnowhereordoesit.com" target="_blank" rel="noreferrer">Text here</a>